numberInput = int(input())
"""
primes = [2]

for i in range(3, 3000):
    for prime in primes:
        if prime > i ** 0.5:
            primes.append(i)
            break
        if i % prime == 0:
            break

primes = primes

def primeFactorise(n, f):
    if n == 1: return [1]
    if n in primes:
        f.append(n)
        return f

    for prime in primes:
        if n % prime == 0:
            f.append(prime)
            f = primeFactorise(n // prime, f)
            break

    return f

score = {1: 1, 2: 2, 3: 3, 5: 5, 7: 6, 11: 8, 13: 8, 17: 9, 19: 9, 23: 11, 29: 11, 31: 11, 37: 11, 41: 12, 43: 12, 47: 13, 53: 13, 59: 14, 61: 13, 67: 14, 71: 14, 73: 13, 79: 14, 83: 14, 89: 15, 97: 14, 101: 15, 103: 15, 107: 16, 109: 14, 113: 15, 127: 15, 131: 16, 137: 16, 139: 17, 149: 16, 151: 16, 157: 16, 163: 15, 167: 17, 173: 17, 179: 18, 181: 16, 191: 17, 193: 16, 197: 17, 199: 17, 211: 17, 223: 17, 227: 18, 229: 17, 233: 18, 239: 18, 241: 17, 251: 18, 257: 17, 263: 19, 269: 19, 271: 17, 277: 19, 281: 18, 283: 19, 293: 18, 307: 18, 311: 19, 313: 18, 317: 19, 331: 19, 337: 18, 347: 20, 349: 19, 353: 19, 359: 20, 367: 19, 373: 19, 379: 18, 383: 20, 389: 19, 397: 19, 401: 19, 409: 19, 419: 20, 421: 19, 431: 20, 433: 18, 439: 19, 443: 20, 449: 19, 457: 19, 461: 20, 463: 20, 467: 21, 479: 21, 487: 18, 491: 20, 499: 20, 503: 21, 509: 20, 521: 20, 523: 20, 541: 19, 547: 20, 557: 21, 563: 21, 569: 20, 571: 20, 577: 19, 587: 21, 593: 20, 599: 22, 601: 20, 607: 21, 613: 20, 617: 21, 619: 21, 631: 20, 641: 20, 643: 22, 647: 21, 653: 20, 659: 21, 661: 21, 673: 20, 677: 21, 683: 22, 691: 22, 701: 21, 709: 22, 719: 23, 727: 22, 733: 21, 739: 21, 743: 22, 751: 21, 757: 20, 761: 21, 769: 20, 773: 21, 787: 22, 797: 22, 809: 22, 811: 20, 821: 22, 823: 22, 827: 23, 829: 22, 839: 22, 853: 22, 857: 22, 859: 22, 863: 23, 877: 21, 881: 22, 883: 21, 887: 23, 907: 22, 911: 22, 919: 21, 929: 22, 937: 21, 941: 23, 947: 22, 953: 22, 967: 23, 971: 22, 977: 22, 983: 22, 991: 22, 997: 22, 1009: 21, 1013: 23, 1019: 23, 1021: 22, 1031: 23, 1033: 22, 1039: 23, 1049: 23, 1051: 22, 1061: 23, 1063: 23, 1069: 23, 1087: 22, 1091: 22, 1093: 22, 1097: 23, 1103: 23, 1109: 23, 1117: 22, 1123: 23, 1129: 23, 1151: 24, 1153: 21, 1163: 23, 1171: 22, 1181: 24, 1187: 23, 1193: 23, 1201: 22, 1213: 23, 1217: 22, 1223: 24, 1229: 23, 1231: 23, 1237: 23, 1249: 22, 1259: 23, 1277: 24, 1279: 23, 1283: 23, 1289: 24, 1291: 23, 1297: 21, 1301: 23, 1303: 23, 1307: 23, 1319: 24, 1321: 23, 1327: 23, 1361: 23, 1367: 24, 1373: 23, 1381: 24, 1399: 24, 1409: 23, 1423: 23, 1427: 24, 1429: 23, 1433: 24, 1439: 26, 1447: 23, 1451: 24, 1453: 24, 1459: 21, 1471: 23, 1481: 23, 1483: 23, 1487: 24, 1489: 23, 1493: 24, 1499: 25, 1511: 24, 1523: 24, 1531: 23, 1543: 23, 1549: 23, 1553: 23, 1559: 24, 1567: 23, 1571: 24, 1579: 25, 1583: 24, 1597: 23, 1601: 23, 1607: 24, 1609: 24, 1613: 24, 1619: 25, 1621: 22, 1627: 23, 1637: 24, 1657: 24, 1663: 25, 1667: 24, 1669: 25, 1693: 24, 1697: 24, 1699: 25, 1709: 24, 1721: 24, 1723: 24, 1733: 23, 1741: 24, 1747: 23, 1753: 23, 1759: 24, 1777: 23, 1783: 23, 1787: 25, 1789: 24, 1801: 23, 1811: 24, 1823: 25, 1831: 24, 1847: 25, 1861: 24, 1867: 25, 1871: 25, 1873: 23, 1877: 25, 1879: 24, 1889: 25, 1901: 24, 1907: 25, 1913: 25, 1931: 24, 1933: 25, 1949: 23, 1951: 24, 1973: 24, 1979: 26, 1987: 25, 1993: 24, 1997: 25, 1999: 23, 2003: 25, 2011: 25, 2017: 23, 2027: 24, 2029: 24, 2039: 25, 2053: 23, 2063: 25, 2069: 26, 2081: 24, 2083: 26, 2087: 25, 2089: 24, 2099: 26, 2111: 25, 2113: 24, 2129: 24, 2131: 25, 2137: 25, 2141: 26, 2143: 24, 2153: 26, 2161: 23, 2179: 25, 2203: 25, 2207: 25, 2213: 25, 2221: 24, 2237: 25, 2239: 25, 2243: 25, 2251: 24, 2267: 26, 2269: 23, 2273: 25, 2281: 24, 2287: 24, 2293: 25, 2297: 25, 2309: 24, 2311: 25, 2333: 25, 2339: 26, 2341: 24, 2347: 26, 2351: 25, 2357: 25, 2371: 25, 2377: 24, 2381: 25, 2383: 25, 2389: 25, 2393: 26, 2399: 25, 2411: 25, 2417: 25, 2423: 26, 2437: 25, 2441: 25, 2447: 25, 2459: 25, 2467: 25, 2473: 25, 2477: 26, 2503: 26, 2521: 24, 2531: 26, 2539: 25, 2543: 26, 2549: 25, 2551: 25, 2557: 25, 2579: 27, 2591: 25, 2593: 23, 2609: 24, 2617: 24, 2621: 25, 2633: 26, 2647: 24, 2657: 25, 2659: 26, 2663: 27, 2671: 26, 2677: 25, 2683: 25, 2687: 26, 2689: 24, 2693: 25, 2699: 26, 2707: 26, 2711: 25, 2713: 25, 2719: 25, 2729: 26, 2731: 25, 2741: 26, 2749: 25, 2753: 25, 2767: 26, 2777: 26, 2789: 26, 2791: 25, 2797: 26, 2801: 25, 2803: 27, 2819: 26, 2833: 26, 2837: 25, 2843: 26, 2851: 25, 2857: 25, 2861: 26, 2879: 27, 2887: 25, 2897: 25, 2903: 27, 2909: 26, 2917: 23, 2927: 26, 2939: 26, 2953: 25, 2957: 26, 2963: 26, 2969: 26, 2971: 25, 2999: 25}
"""
"""
for prime in primes:
    if prime not in score.keys():
        c = 0
        for i in range(1,prime):
            n = prime - i
            factors = primeFactorise(n, [])
            s = i
            for f in factors: s += score[f]
            if prime not in score.keys():
                score[prime] = s
            elif s < score[prime]:
                score[prime] = s
                c += 1
                print("Yes:", c, prime)
                if (c >= 2): break
print(score)
"""
"""
#    print(prime)
print(primeFactorise(numberInput, []))
factors = primeFactorise(numberInput, [])
tot = 0
for f in factors:
    tot += score[f]

tot2 = 0
factors = primeFactorise(numberInput - 1, [])
for f in factors:
    tot2 += score[f]

tot3 = 0
factors = primeFactorise(numberInput - 2, [])
for f in factors:
    tot3 += score[f]

print(min(tot, tot2+1, tot3+2))
"""

arr = [float("inf") for i in range(numberInput+1)]
arr[0] = 0

def factors(n):
    factors = set()
    for i in range(1,int(n**0.5)+1):
        if n % i ==0:
            factors.add(n)
            factors.add(i)
    return factors

for i in range(1, numberInput + 1):
    arr[i] = min(arr[i-1]+1, arr[i])
 #   print(factors(i))
    for f in factors(i):
        a,b = f, i//f
        arr[i] = min(arr[i], arr[a] + arr[b])
#print(arr)
print(arr[numberInput])

"""
b) (1+1+1+1+1)*(1+1+1+1+1)*(1+1)*(1+1)*1*1
c) Yes, it is always possible to create a longer mop, since you can multiply a mop by 1, which increases the length of
   the mop expression but does not increase the value of the number
d) 3^(42/3) * 2 = 9,565,938
"""